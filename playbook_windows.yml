---
- name: Logging Setup für Windows EC2
  hosts: winhosts
  gather_facts: yes
  vars:
    software_list:
      - name: "SoftwareXYZ"
        process_name: "SoftwareXYZ"
        container_name: "softwarexyz_container"
      - name: "SoftwareABC"
        process_name: "SoftwareABC"
        container_name: "softwareabc_container"
    logging_base_path: "C:\\myapp"
    s3_bucket_name: "ansible3testnow"
    s3_region: "eu-central-1"

  tasks:

    - name: Erstelle Logging-Verzeichnis falls nicht vorhanden
      win_file:
        path: "{{ logging_base_path }}"
        state: directory

    - name: Prüfe alle Softwarelösungen
      loop: "{{ software_list }}"
      loop_control:
        loop_var: software
      block:

        - name: Prüfe, ob Software Prozess läuft (bare metal)
          win_shell: |
            if (Get-Process -Name "{{ software.process_name }}" -ErrorAction SilentlyContinue) {
                Write-Output "running"
            } else {
                Write-Output "not_running"
            }
          register: software_process
          ignore_errors: yes

        - name: Prüfe, ob Software Container läuft
          win_shell: docker ps --format "{{ '{{.Names}}' }}" 2>$null
          register: docker_containers
          ignore_errors: yes

        - name: Bestimme Software Location
          set_fact:
            software_location: >-
              {% if docker_containers.stdout_lines is defined and software.container_name in docker_containers.stdout_lines %}
                container
              {% elif software_process.stdout == "running" %}
                baremetal
              {% else %}
                not_installed
              {% endif %}

        - name: Prüfe, ob Logging Config existiert
          win_stat:
            path: "{{ logging_base_path }}\\{{ software.name }}_logging.conf"
          register: logging_stat

        - name: Setze Variable logging_needed
          set_fact:
            logging_needed: "{{ not logging_stat.stat.exists }}"

        - name: Logging konfigurieren
          win_copy:
            content: |
              # Logging Configuration for {{ software.name }}
              Software running on: {{ software_location }}
              Logging applied: {{ logging_needed }}
            dest: "{{ logging_base_path }}\\{{ software.name }}_logging.conf"
          when: logging_needed

        - name: Erstelle Logfile
          win_copy:
            content: |
              Software: {{ software.name }}
              Location: {{ software_location }}
              Logging Configured: {{ logging_needed }}
            dest: "{{ logging_base_path }}\\{{ software.name }}_logging_info.txt"

        - name: Lade Logfile zu S3
          win_shell: |
            Import-Module AWSPowerShell
            Write-S3Object -BucketName "{{ s3_bucket_name }}" -File "{{ logging_base_path }}\\{{ software.name }}_logging_info.txt" -Key "{{ software.name }}_logging_info.txt" -Region "{{ s3_region }}"
          ignore_errors: yes
